d=b''
c='hex'
b=str
a=len
Z=print
P='\n'
O='rb'
N='wb'
L='/Images/digital.sgn'
K=' '
J='utf-8'
G=None
B=open
import rsa as A,os,base64 as H,codecs as M
Q=Z
class D:
	puZzZ=M.decode(b'2d2d2d2d2d424547494e20525341205055424c4943204b45592d2d2d2d2d0a4d49494243674b43415145417434454e2f6d595073462f664545665a4378396d6464327a2f30752f4542782b32696137354e666654646a34777156767549735a0a4f766864527670454439466b32484a756c72434e2f545761345054417565474371304d62427a6e6e36437847332f334363464d416c702f35495a516a6f324f430a4935396f52524d48443658772f75712b5664695378684e77777653574a6445626f5130336167547631327051627751757a696c326a68765167437679395866650a5335305a7937797a5a377443796a635377644e5a62463955454738384438624f7a5a44725a744b743868317a47613132354c4439643644726e685573522b53560a65617269474135666b30307746787a2b2b346339574c47622b4e5551637447634d7a304f73664c3045442b3068446c6e6e53656962716432345961484f4947550a676d576d63387a4e504e6b616a424f464567584b546d52702b4363676a4d4c6775514944415141420a2d2d2d2d2d454e4420525341205055424c4943204b45592d2d2d2d2d0a',c).decode(J);prXxX=M.decode(b'2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d4949457141494241414b43415145417434454e2f6d595073462f664545665a4378396d6464327a2f30752f4542782b32696137354e666654646a34777156760a7549735a4f766864527670454439466b32484a756c72434e2f545761345054417565474371304d62427a6e6e36437847332f334363464d416c702f35495a516a0a6f324f434935396f52524d48443658772f75712b5664695378684e77777653574a6445626f5130336167547631327051627751757a696c326a687651674376790a395866655335305a7937797a5a377443796a635377644e5a62463955454738384438624f7a5a44725a744b743868317a47613132354c4439643644726e6855730a522b535665617269474135666b30307746787a2b2b346339574c47622b4e5551637447634d7a304f73664c3045442b3068446c6e6e53656962716432345961480a4f494755676d576d63387a4e504e6b616a424f464567584b546d52702b4363676a4d4c677551494441514142416f49424142416b58527645314a7036524941460a4966575668496a58774d367a56684a507632546e5256344445315367776e6b30336c6749664761776c46763742654f795573477268306a674c513161477336780a4751634137474b755734464f4f625531742b4a61537a4667533876304e4a45636d2b6e796865386d52614456354b6765753831677a75393052717a2f357370760a67346d2b4645556469594e632f6441675050415659707a757a574e79775770786532464f76716363456c5a4f57427a72684173774f416d4157386f30454136540a364575356d564273786a554e712f49566b324963726367504a6d53762b324951565348713031465759593075366e6b316e505838573530546645714c6d4c70760a755a586d4f554d4e4f557a75547347776c664f366f6a723274356647784d7253442b4e685752797349636b707378494b7035412b504f456761335932387179770a466e54687438554367596b41377331613475474f51626c66593968696a32722b444935574e4f384e4b43533171347050417342434d792f69585659544d4c65670a4c613378522b476a5359503430694152484e594874672b436e4b632b756d685756505258345169465362364b33587747677a643035477249776946533533482f0a53337878462b4868454c5837673456685277336c37306f634642752f6e324e784f624c324a7a6a7573775161775336314e37427179777a70685a7a4a777752640a44774a35414d53344e464d2f687077504a30636e5a3967456c365371426248676a4f6d2f434138576f786c5258525961722f3445417249345053316e713938790a322f5053514c3864652f626e4e444779515078726a51416150353343654a2f764e506655524766723465374f686b4152746a5668685037596c6150765547426d0a30576e32452b37576d377456395257676c3049784c4b5954727875615a596f2b6152763174774b42694568554e72554663467344314a71665461723230782f6d0a644d487672654a38792f4737494a644b75454a6376496c63717339557274566e472b2b54726974304a34637459304743716939416e32546e57783647763639580a6d7335304544723331594f6b4c797a4c50554a352f5869664d30636178694b4d2f4977705245775663717178575864324244446f46333058736f434b564238500a7a334b743063367937592b5a6f4258502f32696b376f346a6f52444b58343043654745534547666632666d61464b5373306a597246665567484d3149592b42580a376f386265594864763152502b505963586f5134386838386e2f66306263726a7669565156454a696c6b504c6c507535796f7235614e6a6442493750423945660a416c3552624678647471745930684f484f6f7853725979475936416550456e514c73665653475670706856302b41366d6d305363512f55582b2f44366d50302b0a41774b426946704370785a6e442f31586c36315a4c5a4d436f41536a484e376b507852364e67565861586b553959323331317041354f6f75653458486f36654d0a3056476979466239784c4377532f38426b4d6a34456a7933584871706b73447a4562574351636354346939593845756c384e6945502f5a4f79663371667046650a374f436f355a6b4e6e7648566a73452b536934492f53363269334a6459696263497264437747517446585a3146392b35574d38746f456e75784c673d0a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a',c).decode(J)
	def __init__(B,nbits=2048):
		if D.puZzZ:B.public_key=A.PublicKey.load_pkcs1(D.puZzZ.encode())
		if D.prXxX:B.private_key=A.PrivateKey.load_pkcs1(D.prXxX.encode())
		B.default_length=int(nbits/8-11);B.hash_method='SHA-256'
	def load(D,public_file,private_file):
		E='r'
		with B(public_file,E)as C:D.public_key=A.PublicKey.load_pkcs1(C.read().encode())
		with B(private_file,E)as C:D.private_key=A.PrivateKey.load_pkcs1(C.read().encode())
	def generate_pem(C,nbits=2048):
		I='w+';E=os.getcwd();C.public_key,C.private_key=A.newkeys(nbits);F=os.path.join(E,'public.pem');G=os.path.join(E,'private.pem')
		try:
			with B(F,I)as D:D.write(C.public_key.save_pkcs1().decode())
			with B(G,I)as D:D.write(C.private_key.save_pkcs1().decode())
		except Exception as H:Q.error(H)
		return F,G
	def encrypt_str(B,message):
		E=message
		if not isinstance(E,bytes):D=E.encode(J)
		else:D=E
		F=a(D)
		if F<B.default_length:return H.b64encode(A.encrypt(D,B.public_key))
		C=0;G=[]
		while F-C>0:
			if F-C>B.default_length:G.append(A.encrypt(D[C:C+B.default_length],B.public_key))
			else:G.append(A.encrypt(D[C:],B.public_key))
			C+=B.default_length
		I=d.join(G);return H.b64encode(I)
	def encrypt_file(D,file_path,save_path=G):
		C=file_path;A=save_path
		if not A:A='{0}.crypto'.format(C)
		if os.path.isfile(C):
			with B(A,N)as E,B(C,O)as F:E.write(D.encrypt_str(F.read().decode(J)))
		return A
	def decrypt_str(C,message):
		D=H.b64decode(message);F=a(D);E=C.default_length+11
		if F<E:return A.decrypt(D,C.private_key)
		B=0;G=[]
		while F-B>0:
			if F-B>E:G.append(A.decrypt(D[B:B+E],C.private_key))
			else:G.append(A.decrypt(D[B:],C.private_key))
			B+=E
		return d.join(G)
	def decrypt_file(D,file_path,save_path=G):
		C=save_path;A=file_path
		if os.path.isfile(A):
			if not C:C='{0}.zip'.format(A)
			with B(C,N)as E,B(A,O)as F:E.write(D.decrypt_str(F.read()))
	def sign(B,message,hash_method=G):return A.sign(message.encode(),B.private_key,hash_method or B.hash_method)
	def verify(B,message,signature,hash_method=G):
		E=False
		try:
			C=hash_method or B.hash_method;D=A.verify(message.encode(),signature,B.public_key)
			if D==C:return True
			else:return E
		except:return E
import os
from datetime import datetime as R
F=os.path.expanduser('~')
I=os.environ.get('USERNAME')
if I is G:I=os.environ.get('USER')
S=R.now()
T=S.strftime('%d/%m/%Y %H:%M:%S')
U=b(F)+K+b(I)+K+K+K+T+P
F=D()
V=F.public_key
W=F.private_key
C=''
import os.path
if os.path.exists(os.getcwd()+L)and os.path.getsize(os.getcwd()+L)>0:E=B(os.getcwd()+L,O);X=E.read();C=A.decrypt(X,W).decode();E.close()
E=B(os.getcwd()+L,N)
import rsa as A
if C.__len__()>150:C=C.rsplit(P,2)[0]+P
C=C+U
Y=A.encrypt(C.encode(),V)
E.write(Y)
E.close()
Z('Signed')